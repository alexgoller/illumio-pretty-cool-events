#!/usr/bin/env python3

import requests
import argparse
import yaml
from yaml.loader import SafeLoader
import os
import time
import logging
import sys
import pce
import json
import datetime
import threading
import regex
import pprint
import jsonpickle
from flask import Flask, render_template
from outputplugin import OutputPlugin
from straight.plugin import load

FORMAT = '%(asctime)s %(message)s'
logging.basicConfig(stream=sys.stdout, level=logging.DEBUG, format=FORMAT)

# just --config being used right now
parser = argparse.ArgumentParser(description='Run the event loop!')
parser.add_argument('--config', help='Location of the config file', default = 'config.yml')
args = parser.parse_args()

# check if file exists
if not os.path.isfile(args.config):
    logging.warning("Config file {} does not exist. Use --config <file>. Quitting.".format(args.config))
    parser.print_usage()
    exit()
elif os.path.isfile(args.config):
    with open(args.config, 'r') as stream:
        try:
            logging.info("Reading config file: %s", args.config)
            data = yaml.load(stream, Loader=SafeLoader)
        except yaml.YAMLError as exc:
            logging.warning("Config file read error: %s", exc)
else:
    logging.warning("Config file {} is not a file.".format(args.config))
    parser.print_usage()
    exit()

def createTemplateGlobals(tg):
    for key in ['pce', 'pce_org']:
        if key in config and key not in tg:
            tg[key] = config[key]

    return tg

    return(template_globals)


def configCheck(configData):
    exiting = False

    global_values = ['pce', 'pce_api_user', 'pce_api_secret', 'pce_org', 'pce_poll_interval']

    for key in global_values:
        if key in data['config']:
            logging.info("[x] Config has mandatory key: {}.".format(key))
        else:
            logging.info("[ ] Config has mandatory key: {}.".format(key))

    if 'plugin_config' in data['config']:
        logging.info("[x] Config has plugin_config section.")
    else:
        logging.info("[ ] Config has plugin_config section.")

    if 'watchers' in data:
        logging.info("[x] Config has watcher section.")
    else:
        logging.info("[ ] Config has watcher section.")

    if exiting:
        exit()

# main 
config = data['config']
activePlugins = { }

# do a basic config check
configCheck(data)

### watcher stuff
watchers = data['watchers']

# something to store the regexes
watchers_regexes = {}

logging.debug("Watchers type: {}".format(type(watchers)))

logging.info("Configured watchers:")
for watcher in watchers:
    logging.info("    Watcher found for: - {}".format(watcher))
    for output in watchers[watcher]:
        compiled_regex = False
        try:
            compiled_regex = regex.compile(watcher)
        except :
            logging.error("Can't compile regex: {}".format(watcher))
            exit()

        if compiled_regex:
            watchers_regexes[watcher] = compiled_regex

        activePlugins[output['plugin']] = 1

logging.debug("Regexes: {}".format(watchers_regexes))

### check plugins
plugins = load('plugins', subclasses=OutputPlugin)
handlers = plugins.produce()

# setup configs for handlers/plugins
for handler in handlers:
    if handler.__class__.__name__ in activePlugins:
        logging.info("Configuring: {}".format(handler.__class__.__name__))
        handler.config(config['plugin_config'][handler.__class__.__name__])
    else:
        logging.info("No config needed for {}. Ignoring plugin.".format(handler.__class__.__name__))

stats = {'events_received': 0, 'events_matched': 0, 'plugin_stats': {}, 'event_stats': {}}

pce = pce.IllumioPCE()
pce.pce = config['pce']
pce.pce_api_user = config['pce_api_user']
pce.pce_api_secret = config['pce_api_secret']
pce.pce_org = config['pce_org']
pce.client_init()

r3c = pce.client.get("/api/v2/health", raw_response=True)

if r3c.status_code == 200:
    logging.info("Connected to PCE: {}".format(config['pce']))
else:
    logging.warning("Can't connect to PCE: {}".format(config['pce']))
    # just for debugging
    obj = jsonpickle.encode(r3c)
    pprint.pprint(obj)
    exit()


app = Flask('pretty-cool-events')

def updateEventStats(event):
    if event not in stats['event_stats']:
        stats['event_stats'][event] = 1
    else:
        stats['event_stats'][event] = stats['event_stats'][event] + 1

def updateMatchStats(event, plugin_name):
    if plugin_name not in stats['plugin_stats']:
        stats['plugin_stats'][plugin_name] = 1
    else:
        stats['plugin_stats'][plugin_name] = stats['plugin_stats'][plugin_name] + 1

# this is code for a small embedded web server, not sure if I want to keep it
# thought is to draft a initial config using flask and give that to the user
# to edit and then save it to a file
# also could be used to expose statistics etc.
def flaskTask():
    if 'httpd_listener_address' in config:
        address = config['httpd_listener_address']
    else:
        address = '0.0.0.0'

    if 'httpd_listener_port' in config:
        flask_port = config['httpd_listener_port']
    else:
        flask_port = 8443

    app.run(host=address, port=flask_port)

@app.route("/")
def pceMain():
    return render_template('index.html', stats=stats, config=config)

@app.route("/watchers")
def pceWatchers():
    return str(watchers)

@app.route("/config")
def pceConfig():
    return render_template('wizard.html')

@app.route("/stats")
def pceStats():
    return str(stats)

def traffic_task():
    logging.info("Entering traffic task with poll interval: %s", config['pce_traffic_interval'])
    run = 0
    current_date = 0
    current_date = datetime.datetime.now(datetime.timezone.utc).astimezone()

    traffic_json = { 
        "start_date": "2021-01-01", 
        "end_date": "2022-03-31", 
        "policy_decisions": [ "allowed", "blocked" ], 
        "max_results": 10000, 
        "exclude_workloads_from_ip_list_query": True, 
        "sources": { 
            "include": [], 
            "exclude": []
        },
        "destinations": { 
            "include": [], 
            "exclude": [] 
        },
        "sources_destinations_query_op": "and", 
        "services": {
            "include": [], 
            "exclude": []
        }
    }

    #  format the date like this "2021-04-16 12:00:00"
    current_date = datetime.datetime.now(datetime.timezone.utc).astimezone()
    traffic_json["start_date"] = current_date.strftime("%Y-%m-%d %H:%M:%S")

    # // set end_date to be current date - 14 days
    end_date = current_date - datetime.timedelta(days=360)
    traffic_json['end_date'] = end_date.strftime("%Y-%m-%d %H:%M:%S")

    logging.debug("Start date: {}".format(traffic_json['start_date']))
    logging.debug("End date: {}".format(traffic_json['end_date']))

    query_data = json.dumps(traffic_json)

    while True:
        logging.debug("Running traffic task")
        r3c = pce.client.post("/api/v2/orgs/{}/traffic_flows/traffic_analysis_queries".format(pce.pce_org), data=query_data)
        logging.debug("Rest client result: {}".format(r3c))

        run = run +1
        current_date = datetime.datetime.now(datetime.timezone.utc).astimezone()
        time.sleep(config['pce_poll_interval'])

# main loop
def main():
    logging.info("Entering main poll loop with interval: %s", config['pce_poll_interval'])
    run = 0
    current_date = 0
    
    current_date = datetime.datetime.now(datetime.timezone.utc).astimezone()
    
    template_globals = {}
    template_globals = createTemplateGlobals(template_globals)
    logging.info("Template globals: {}".format(template_globals))

    while True:
        payload = {'timestamp[gte]': current_date}
        try:
            r3c = pce.client.get("/api/v2/orgs/{}/events".format(pce.pce_org), params = payload)
        except:
            logging.error("Error getting events from PCE.")
            logging.error("Sleep and try again.")
            time.sleep(config['pce_poll_interval'])
            continue

        for event in r3c:
            logging.info("Event received: {}".format(json.dumps(event)))
            stats['events_received'] = stats['events_received'] + 1

            if 'event_type' in event:
                updateEventStats(event['event_type'])
            else:
                logging.warn("Malformed event! No event_type field.")
                continue

            template = config['default_template']
            if event['event_type'] in watchers:
                stats['events_matched'] = stats['events_matched'] + 1
                logging.debug("Matching event type: {}".format(event['event_type']))

                for w in watchers[event['event_type']]:
                    if event['status'] == w['status']:
                        logging.debug("Hooray, even the status matches... Now decide what to do with it!")
                        plugin_name = ''
                        if 'plugin' in w:
                            logging.debug("Found matching plugin: {}".format(w['plugin']))
                            plugin_name = w['plugin']
                        if 'template' in w:
                            template = w['template']
                        if 'extra_data' in w:
                            logging.debug("Found extra_data.")
                            extra_data = w['extra_data']
                        else:
                            extra_data = {}

                        for handler in handlers:
                            if handler.__class__.__name__ == plugin_name:
                                logging.info("Routing event {} to {}".format(event['event_type'], plugin_name))
                                updateMatchStats(event, plugin_name)
                                handler.output(event, extra_data, template_globals)

            elif event['event_type'] not in watchers:
                logging.debug("Wildcard branch for event: {}".format(event))
                evt = event['event_type']

                for key, watcher in watchers.items():
                    if key in watchers_regexes and watchers_regexes[key].match(evt):
                        logging.debug("Regex match: {} - {}".format(key, evt))
                        for w in watchers[key]:
                            if event['status'] == w['status']:
                                plugin_name = ''
                                if 'template' in w:
                                    template = w['template']
                                if 'plugin' in w:
                                    logging.debug("Found matching plugin: {}".format(w['plugin']))
                                    plugin_name = w['plugin']
                                if 'extra_data' in w:
                                    logging.debug("Found extra_data.")
                                    extra_data = w['extra_data']
                                else:
                                    extra_data = {}

                                for handler in handlers:
                                    if handler.__class__.__name__ == plugin_name:
                                        stats['events_matched'] = stats['events_matched'] + 1
                                        logging.info("Routing event {} to {}".format(event['event_type'], plugin_name))
                                        updateMatchStats(event, plugin_name)
                                        logging.debug("Event: {}".format(event))
                                        logging.debug("extra_data: {}".format(extra_data))
                                        logging.debug("template_globals: {}".format(template_globals))
                                        handler.output(event, extra_data, template_globals)
                    else:
                        logging.debug("No event found matching spec: {}".format(key))

        # increment run parameter
        run = run+1
        current_date = datetime.datetime.now(datetime.timezone.utc).astimezone()
        time.sleep(config['pce_poll_interval'])

logging.info("Starting main task.")
threading.Thread(target=main).start()


# start traffic walker if marked in config
if 'traffic_worker' in config and config['traffic_worker'] == True:
    logging.info("Starting traffic task")
    threading.Thread(target=traffic_task).start()

if config['httpd']:
    logging.info("Starting httpd task.")
    threading.Thread(target=flaskTask).start()

