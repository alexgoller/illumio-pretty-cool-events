#!/usr/bin/env python3

import requests
import argparse
import yaml
from yaml.loader import SafeLoader
import os
import time
import logging
import sys
import pce
import json
import datetime
import threading
import regex
from flask import Flask, render_template
from outputplugin import OutputPlugin
from straight.plugin import load

logging.basicConfig(stream=sys.stdout, level=logging.INFO)

# just --config being used right now
parser = argparse.ArgumentParser(description='Run the event loop!')
parser.add_argument('--config', help='Location of the config file', default = 'config.yml')
args = parser.parse_args()

if 'config' not in args:
    logging.warn("No config file given. Quitting")
    exit()


if os.path.exists(args.config):
    with open(args.config, 'r') as stream:
        try:
            logging.info("Reading config file: %s", args.config)
            data = yaml.load(stream, Loader=SafeLoader)
        except yaml.YAMLError as exc:
            logging.warn("Config file read error: %s", exc)
else:
    logging.info("Can't open config file: ", args.config)
    exit()

def createTemplateGlobals():
    for key in ['pce', 'pce_org']:
        if key in config and key not in template_globals:
            template_globals[key] = config[key]


def configCheck(configData):
    exiting = False

    global_values = ['pce', 'pce_api_user', 'pce_api_secret', 'pce_org', 'pce_poll_interval']

    for key in global_values:
        if key in data['config']:
            logging.info("[x] Config has mandatory key: {}.".format(key))
        else:
            logging.info("[ ] Config has mandatory key: {}.".format(key))

    if 'plugin_config' in data['config']:
        logging.info("[x] Config has plugin_config section.")
    else:
        logging.info("[ ] Config has plugin_config section.")

    if 'watchers' in data:
        logging.info("[x] Config has watcher section.")
    else:
        logging.info("[ ] Config has watcher section.")

    if exiting:
        exit()

config = data['config']
activePlugins = { }

# do a basic config check
configCheck(data)

### watcher stuff
watchers = data['watchers']
logging.debug("Watchers type: {}".format(type(watchers)))

logging.info("Configured watchers:")
for watcher in watchers:
    logging.info("    Watcher found for: - {}".format(watcher))
    for output in watchers[watcher]:
        print(output)
        activePlugins[output['plugin']] = 1

### check plugins
plugins = load('plugins', subclasses=OutputPlugin)
handlers = plugins.produce()

# setup configs for handlers/plugins
for handler in handlers:
    if handler.__class__.__name__ in activePlugins:
        logging.info("Configuring: {}".format(handler.__class__.__name__))
        handler.config(config['plugin_config'][handler.__class__.__name__])
    else:
        logging.info("No config needed for {}. Ignoring plugin.".format(handler.__class__.__name__))

stats = {'events_received': 0, 'events_matched': 0, 'plugin_stats': {} }

pce = pce.IllumioPCE()
pce.pce = config['pce']
pce.pce_api_user = config['pce_api_user']
pce.pce_api_secret = config['pce_api_secret']
pce.pce_org = config['pce_org']
pce.client_init()


app = Flask('pretty-cool-events')

def updateMatchStats(event, plugin_name):
    if plugin_name not in stats['plugin_stats']:
        stats['plugin_stats'][plugin_name] = 1
    else:
        stats['plugin_stats'][plugin_name] = stats['plugin_stats'][plugin_name] + 1

def flaskTask():
    if 'httpd_listener_address' in config:
        address = config['httpd_listener_address']
    else:
        address = '0.0.0.0'

    if 'httpd_listener_port' in config:
        flask_port = config['httpd_listener_port']
    else:
        flask_port = 8443

    app.run(host=address, port=flask_port)

@app.route("/")
def pceMain():
    return render_template('index.html', stats=stats, config=config)

@app.route("/watchers")
def pceWatchers():
    return str(watchers)

@app.route("/config")
def pceConfig():
    return render_template('wizard.html')

@app.route("/stats")
def pceStats():
    return str(stats)

# main loop
def main():
    logging.info("Entering main poll loop with interval: %s", config['pce_poll_interval'])
    run = 0
    current_date = 0
    
    current_date = datetime.datetime.now(datetime.timezone.utc).astimezone()
    
    template_globals = {}
    createTemplateGlobals()

    while True:
        payload = {'timestamp[gte]': current_date}
        r3c = pce.client.get("/api/v2/orgs/{}/events".format(pce.pce_org), params = payload)

    

        for event in r3c:
            stats['events_received'] = stats['events_received'] + 1
            template = config['default_template']
            if event['event_type'] in watchers:
                stats['events_matched'] = stats['events_matched'] + 1
                logging.debug("Matching event type:", event['event_type'])

                for w in watchers[event['event_type']]:
                    if event['status'] == w['status']:
                        logging.debug("Hooray, even the status matches... Now decide what to do with it!")
                        plugin_name = ''
                        if 'plugin' in w:
                            logging.debug("Found matching plugin:", w['plugin'])
                            plugin_name = w['plugin']
                        if 'template' in w:
                            template = w['template']
                        if 'extra_data' in w:
                            logging.debug("Found extra_data.")
                            extra_data = w['extra_data']
                        else:
                            extra_data = {}

                        for handler in handlers:
                            if handler.__class__.__name__ == plugin_name:
                                logging.info("Routing event {} to {}".format(event['event_type'], plugin_name))
                                updateMatchStats(event, plugin_name)
                                handler.output(event, extra_data)

            elif event['event_type'] not in watchers:
                logging.debug("Wildcard branch for event: {}".format(event))
                evt = event['event_type']
                for key, watcher in watchers.items():
                    if evt.startswith(key):
                        for w in watchers[key]:
                            if event['status'] == w['status']:
                                plugin_name = ''
                                if 'template' in w:
                                    template = w['template']
                                if 'plugin' in w:
                                    logging.debug("Found matching plugin:", w['plugin'])
                                    plugin_name = w['plugin']
                                if 'extra_data' in w:
                                    logging.debug("Found extra_data.")
                                    extra_data = w['extra_data']
                                else:
                                    extra_data = {}

                                for handler in handlers:
                                    if handler.__class__.__name__ == plugin_name:
                                        stats['events_matched'] = stats['events_matched'] + 1
                                        logging.info("Routing event {} to {}".format(event['event_type'], plugin_name))
                                        updateMatchStats(event, plugin_name)
                                        handler.output(event, extra_data)
                    else:
                        logging.debug("No event found matching spec: {}".format(key))

    
        # increment run parameter
        run = run+1
        current_date = datetime.datetime.now(datetime.timezone.utc).astimezone()
        time.sleep(config['pce_poll_interval'])

logging.info("Starting main task.")
threading.Thread(target=main).start()

if config['httpd']:
    logging.info("Starting httpd task.")
    threading.Thread(target=flaskTask).start()

